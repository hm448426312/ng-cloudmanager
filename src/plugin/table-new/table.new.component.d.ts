import { EventEmitter, OnInit, TemplateRef, ElementRef, AfterViewInit, ChangeDetectorRef } from '@angular/core';
import { TableHeaderClass, TableOptionsClass } from './table.type';
import { ColumnNewComponent } from './column.new.component';
import { TipService } from '../tip/tip.service';
export declare class TableNewComponent implements OnInit, AfterViewInit {
    private tipService;
    private cdr;
    radioName: string;
    nowSort: any;
    dropLeft: number;
    filterDrop: Array<any>;
    allCheck: any;
    allCheckFlag: boolean;
    expandAllFlag: boolean;
    defaultShowFilterDropIndex: number;
    cloumnTemplate: TemplateRef<ColumnNewComponent>;
    options: TableOptionsClass;
    _headers: TableHeaderClass[];
    headers: TableHeaderClass[];
    _datas: Array<any>;
    datas: any[];
    checkEvent: EventEmitter<any>;
    radioEvent: EventEmitter<any>;
    expandAllEvent: EventEmitter<any>;
    expandItemEvent: EventEmitter<any>;
    sortEvent: EventEmitter<any>;
    filterToggleEvent: EventEmitter<any>;
    tableHead: ElementRef;
    constructor(tipService: TipService, cdr: ChangeDetectorRef);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    initAllCheckStatus(checked: boolean, source?: Array<any>): void;
    calcTheadPadding(): "18px" | "8px";
    calcBodyHeight(height?: string): string;
    deleteDefaultFilter(filed: string): void;
    onDocumentClick(ev: any): void;
    sort(header: any): void;
    hideFilterDrop(): void;
    filterCheckAllEvent(ev: any): void;
    filterRadioCheckEvent(ev: any, header: any): void;
    filterCheckItemEvent(ev: any): void;
    showFilterDrop(index: number, ev: any): void;
    clickFilter(ev: any, header: any, index: number): void;
    checkEmpty(ev: any, header: any, index?: number): void;
    calcPaddingLeft(header: any, row: any): string;
    clearRadioCheckOption(ev: any, header: any, list: any): void;
    sendRadioCheckOption(ev: any, header: any, list: any): void;
    sendCheckOption(ev: any, header: any, list: any): void;
    insertData(datas: Array<any>, parent?: any, index?: number): void;
    deleteDataByKey(key: string, val: any): boolean;
    updateDataByKey(key: string, val: any, data: any): boolean;
    checkedDataByIndex(index: number, checked: boolean): void;
    initDatas(datas: any, parent?: any): void;
    expandAll(header: any, ev: any): void;
    expandItem(header: any, data: any, ev: any): void;
    checkRows(datas: any, check: boolean): void;
    deepGetAllChecked(source: Array<any>, result: Array<any>): void;
    allCheckEvent(ev: any): void;
    deepCheckBoxChange(checkedArr: Array<any>, source: Array<any>, flag: any): void;
    deepUnCheck(source: Array<any>, expRow: any): void;
    checkBoxChange(ev: any, row: any): void;
    private _findItemByKey(key, val, datas);
    private _findParentsByItem(result, key, val, datas);
    private _findParentByKey(key, val, datas, parent?);
    findParentsByKey(key: string, val: any): any;
    findParentByKey(key: string, val: any): any;
    findItemByKey(key: string, val: any): any;
    getCheckedsItem(): any[];
    getCheckedsItemByDatas(result: Array<any>, source: Array<any>): void;
    toggleItemByItem(item: any): void;
    dateChangeEvent(ev: any, filter: any, type?: string): void;
    checkDate(filter: any): boolean;
    sendDateCheckEvent(ev: any, filter: any, header: any): boolean;
    raDioChange(ev: any, row: any): void;
    clearValue(ev: any, filter: any, header: any): void;
}
